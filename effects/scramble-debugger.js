/**\n * Scramble Debug Utilities\n * Utilidades de debugging para el efecto scramble\n * PoisonedDog - 2025\n */\n\nclass ScrambleDebugger {\n  constructor() {\n    this.debugMode = false;\n    this.statusElement = null;\n    this.init();\n  }\n  \n  init() {\n    this.createStatusElement();\n    this.setupKeyboardShortcuts();\n  }\n  \n  createStatusElement() {\n    this.statusElement = document.createElement('div');\n    this.statusElement.className = 'scramble-status';\n    this.statusElement.innerHTML = 'Scramble: Ready';\n    document.body.appendChild(this.statusElement);\n  }\n  \n  setupKeyboardShortcuts() {\n    // Ctrl + Shift + D para toggle debug\n    document.addEventListener('keydown', (e) => {\n      if (e.ctrlKey && e.shiftKey && e.code === 'KeyD') {\n        e.preventDefault();\n        this.toggleDebugMode();\n      }\n      \n      // Ctrl + Shift + R para recovery\n      if (e.ctrlKey && e.shiftKey && e.code === 'KeyR') {\n        e.preventDefault();\n        this.forceRecovery();\n      }\n    });\n  }\n  \n  toggleDebugMode() {\n    this.debugMode = !this.debugMode;\n    document.body.classList.toggle('scramble-debug', this.debugMode);\n    document.body.classList.toggle('test-mode', this.debugMode);\n    this.statusElement.classList.toggle('show', this.debugMode);\n    \n    console.log(`Scramble Debug Mode: ${this.debugMode ? 'ON' : 'OFF'}`);\n    \n    if (this.debugMode) {\n      this.startMonitoring();\n    } else {\n      this.stopMonitoring();\n    }\n  }\n  \n  startMonitoring() {\n    this.monitorInterval = setInterval(() => {\n      this.checkScrambleHealth();\n    }, 1000);\n  }\n  \n  stopMonitoring() {\n    if (this.monitorInterval) {\n      clearInterval(this.monitorInterval);\n    }\n  }\n  \n  checkScrambleHealth() {\n    const scrambleActive = window.languageScramble?.isActive() || false;\n    const hasProblematicElements = this.findProblematicElements().length > 0;\n    \n    let status = 'OK';\n    let className = 'success';\n    \n    if (scrambleActive) {\n      status = 'SCRAMBLING';\n      className = '';\n    } else if (hasProblematicElements) {\n      status = 'ISSUES DETECTED';\n      className = 'error';\n    }\n    \n    this.updateStatus(status, className);\n  }\n  \n  updateStatus(text, className) {\n    this.statusElement.textContent = `Scramble: ${text}`;\n    this.statusElement.className = `scramble-status show ${className}`;\n  }\n  \n  findProblematicElements() {\n    const elements = [];\n    \n    document.querySelectorAll('[data-i18n]').forEach(el => {\n      if (el.tagName !== 'META' && el.tagName !== 'TITLE') {\n        // Buscar elementos con efectos colgados\n        const hasFilter = el.style.filter && el.style.filter !== 'none';\n        const hasTextShadow = el.style.textShadow && el.style.textShadow !== 'none';\n        const hasTransform = el.style.transform && el.style.transform !== 'none';\n        \n        // Buscar texto que parezca scrambled\n        const text = el.textContent;\n        const hasWeirdChars = /[@#$%&*]{2,}/.test(text);\n        const hasRandomCaps = /[A-Z]{3,}[a-z]{1,2}[A-Z]/.test(text);\n        \n        if (hasFilter || hasTextShadow || hasTransform || hasWeirdChars || hasRandomCaps) {\n          elements.push({\n            element: el,\n            issues: {\n              hasFilter,\n              hasTextShadow, \n              hasTransform,\n              hasWeirdChars,\n              hasRandomCaps,\n              text: text.substring(0, 50)\n            }\n          });\n        }\n      }\n    });\n    \n    return elements;\n  }\n  \n  forceRecovery() {\n    console.log('🚨 Ejecutando recuperación forzada...');\n    \n    document.body.classList.add('recovering');\n    \n    // Limpiar todos los efectos visuales\n    document.querySelectorAll('*').forEach(el => {\n      if (el.style.filter) el.style.filter = '';\n      if (el.style.textShadow) el.style.textShadow = '';\n      if (el.style.transform) el.style.transform = '';\n      if (el.style.transition) el.style.transition = '';\n      if (el.style.animation) el.style.animation = '';\n    });\n    \n    // Llamar recovery del scramble\n    if (window.languageScramble) {\n      window.languageScramble.emergencyRecover();\n    }\n    \n    // Re-aplicar traducciones\n    if (window.portfolioApp) {\n      setTimeout(() => {\n        window.portfolioApp.updateTranslations();\n      }, 100);\n    }\n    \n    setTimeout(() => {\n      document.body.classList.remove('recovering');\n      console.log('✅ Recuperación completada');\n    }, 1000);\n  }\n  \n  // Métodos públicos para usar en consola\n  diagnose() {\n    console.log('🔍 DIAGNÓSTICO DEL SCRAMBLE EFFECT');\n    console.log('=====================================');\n    \n    const scrambleExists = !!window.languageScramble;\n    const scrambleActive = window.languageScramble?.isActive() || false;\n    const problematicElements = this.findProblematicElements();\n    \n    console.log(`Scramble existe: ${scrambleExists}`);\n    console.log(`Scramble activo: ${scrambleActive}`);\n    console.log(`Elementos problemáticos: ${problematicElements.length}`);\n    \n    if (problematicElements.length > 0) {\n      console.log('\\n🚨 ELEMENTOS CON PROBLEMAS:');\n      problematicElements.forEach((item, index) => {\n        console.log(`${index + 1}. ${item.element.tagName} [${item.element.dataset.i18n}]`);\n        console.log(`   Texto: \"${item.issues.text}\"`);\n        console.log(`   Problemas:`, item.issues);\n        console.log(`   Elemento:`, item.element);\n      });\n    }\n    \n    console.log('\\n💡 COMANDOS DISPONIBLES:');\n    console.log('- debugger.forceRecovery() - Recuperación forzada');\n    console.log('- debugger.cleanAll() - Limpieza total');\n    console.log('- debugger.testScramble() - Probar efecto');\n    console.log('- Ctrl+Shift+D - Toggle debug mode');\n    console.log('- Ctrl+Shift+R - Recuperación rápida');\n  }\n  \n  cleanAll() {\n    console.log('🧹 Limpieza total iniciada...');\n    \n    // Aplicar reset nuclear temporal\n    document.body.classList.add('emergency-cleanup');\n    \n    setTimeout(() => {\n      // Quitar clases de reset\n      document.body.classList.remove('emergency-cleanup');\n      \n      // Aplicar clase de restauración\n      document.querySelectorAll('[data-i18n]').forEach(el => {\n        if (el.tagName !== 'META' && el.tagName !== 'TITLE') {\n          el.classList.add('text-restored');\n          setTimeout(() => {\n            el.classList.remove('text-restored');\n          }, 300);\n        }\n      });\n      \n      // Forzar re-traducción\n      if (window.portfolioApp) {\n        window.portfolioApp.updateTranslations();\n      }\n      \n      console.log('✅ Limpieza total completada');\n    }, 500);\n  }\n  \n  testScramble() {\n    if (window.languageScramble && !window.languageScramble.isActive()) {\n      console.log('🧪 Probando efecto scramble...');\n      window.languageScramble.triggerScramble();\n    } else {\n      console.log('❌ No se puede probar: scramble activo o no disponible');\n    }\n  }\n  \n  showHelp() {\n    console.log(`\n🔧 SCRAMBLE DEBUGGER HELP\n=========================\n\n📋 COMANDOS DE CONSOLA:\n• debugger.diagnose() - Diagnóstico completo\n• debugger.forceRecovery() - Recuperación de emergencia  \n• debugger.cleanAll() - Limpieza total\n• debugger.testScramble() - Probar efecto\n• debugger.showHelp() - Esta ayuda\n\n⌨️ ATAJOS DE TECLADO:\n• Ctrl+Shift+D - Toggle modo debug\n• Ctrl+Shift+R - Recuperación rápida\n\n🔍 MODO DEBUG:\nActiva indicadores visuales y monitoreo en tiempo real\n\n⚠️ SI HAY PROBLEMAS:\n1. Presiona Ctrl+Shift+R para recuperación rápida\n2. Si persiste, usa debugger.forceRecovery() en consola\n3. Como último recurso: debugger.cleanAll()\n\n💡 Para usar en consola: window.scrambleDebugger o simplemente 'debugger'\n`);\n  }\n}\n\n// Inicializar cuando esté listo\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.scrambleDebugger = new ScrambleDebugger();\n  \n  // Alias corto para consola\n  window.debugger = window.scrambleDebugger;\n  \n  console.log('🐕‍💥 Scramble Debugger cargado - escribe \"debugger.showHelp()\" para ayuda');\n});\n